library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
source("clustering.R")
source("clustering.R")
source("clustering.R")
source("seqToString.R")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
ds <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
source("clustering.R")
#on va adapter les datas des clusters
#création de faux timestamp
start <- as.POSIXct(c(1:length(ds_clustered$actionName)), origin = "1970-01-01", tz = "UTC")
complete<-start
ds_clust_format <- merge(tibble(start, complete), ds_clustered)
ds_clust_format
ds_clustered
ds_clust_format <- tibble(start, complete, ds_clustered)
ds_clust_format
View(ds_clust_format)
ds_clust_format %>%
activitylog(case_id = "actionName", timestamps = c("start", "complete"))
ds_clust_format %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"))
ds_clust_format %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = none)
ds_clust_format %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"))
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"))
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "no")
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")%>%
process_map(frequency="relative")
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")%>%
process_map(frequency("relative"))
colnames(ds_clustered)<-c("actionName", "sequence")
for (i in 2:4){
X<-tibble(str_to_subset(nodes[i]), rep(i,length(nodes[i])))
colnames(X)<-c("actionName", "sequence")
ds_clustered<-rbind(ds_clustered, X)
}
start <- as.POSIXct(c(1:length(ds_clustered$actionName)), origin = "1970-01-01", tz = "UTC")
complete<-start
ds_clust_format <- tibble(start, complete, ds_clustered)
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")%>%
process_map(frequency("relative"))
ds_clustered<-tibble(str_to_subset(nodes[1]), rep(1,length(nodes[1])))
ds_clustered
nodes<-get_nodes(df)
nodes
cluster<-cutree(tree, 3)
df<-tibble(list_of_strings, cluster)
nodes<-get_nodes(df)
ds_clustered<-tibble(str_to_subset(nodes[1]), rep(1,length(nodes[1])))
colnames(ds_clustered)<-c("actionName", "sequence")
for (i in 2:3){
X<-tibble(str_to_subset(nodes[i]), rep(i,length(nodes[i])))
colnames(X)<-c("actionName", "sequence")
ds_clustered<-rbind(ds_clustered, X)
}
#création de faux timestamp
start <- as.POSIXct(c(1:length(ds_clustered$actionName)), origin = "1970-01-01", tz = "UTC")
complete<-start
ds_clust_format <- tibble(start, complete, ds_clustered)
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")%>%
process_map(frequency("relative"))
