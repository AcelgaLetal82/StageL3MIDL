find_representant <- function(matrix_dist, vec_str){
line_dist = rowSums(matrix_dist**2)
ranked_dist<-min_rank(line_dist)
print(ranked_dist)
print(var(matrix_dist))
variance<-diag(var(matrix_dist))
#init des variables
min_var=variance[1]
indice=1
for (i in 1:length(ranked_dist)){
if(ranked_dist[i]==1 && min_var>variance[i]) {
min_var=variance[i]
indice=i
}
}
return(vec_str[indice])
}
find_representant(matrix, df$list_of_strings_full)
matrix
matrix**2
#fonction qui trouve le représentant d'un cluster à partir de la matrice de distance et du vecteur des différents elements
#on trouve l'element qui a la plus petite distance au carré cumulée.
find_representant <- function(matrix_dist, vec_str){
line_dist = rowSums(matrix_dist**2)
ranked_dist<-min_rank(line_dist)
print(which(ranked_dist==1))
return(vec_str[which(ranked_dist==1)])
}
find_representant(matrix, df$list_of_strings_full)
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
#retourne la liste des représentant de chaque cluster. En ieme position, le representant du cluster i.
#entrée: un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
get_nodes_mat<-function(df){
output<-c()
index <- 1
cluster_i <- get_cluster_i(df, index)        #retourne les elements du ieme cluster
while (length(cluster_i)>0){
if (length(cluster_i)==1){                 #si un seul element dans le cluster, c'est le representant
output<-append(output, cluster_i[1])
}
else{
mat_dist_cluster<-stringdistmatrix(cluster_subset, cluster_subset, method = "lcs")  #on calcule les distances des elements du cluster UNIQUEMENT
output<-append(output, find_representant(mat_dist_cluster, cluster_subset))         #on trouve son représentant
}
index<-index+1                                                     #incrementation de i et recalcul du nouveau cluster
cluster_subset <- get_cluster_i(df, index)
}
return(output)
}
#retourne les elements du ieme cluster.
#entrée: -un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
#        -l'indice du cluster
get_cluster_i<-function(df,i){
return(subset(df, subset= (cluster==i))$list_of_strings )
}
#fonction qui trouve le représentant d'un cluster à partir de la matrice de distance et du vecteur des différents elements
#on trouve l'element qui a la plus petite distance au carré cumulée.
find_representant <- function(matrix_dist, vec_str){
line_dist = rowSums(matrix_dist**2)
ranked_dist<-min_rank(line_dist)
return(vec_str[which(ranked_dist==1)])
}
#fonction qui fusionne N strings à partir de leur séquence commune
merge_strings <- function(vec_str, com_subseq){
splited <- split_string(vec_str, com_subseq)
output<-str_c(splited[1],com_subseq, splited[2])
return(output)
}
#fonction qui retourne la distance entre deux strings et la substring commune la plus longue
distance <- function(string1, string2) {
seqcom <- LCSn(c(string1, string2))
return(c(str_length(seqcom[1]), seqcom))
}
merge_from_subseq <- function(str1, str2, subseq){
pos_str1 = get_pos_subseq(str_to_vec(str1), str_to_vec(subseq))
pos_str2 = get_pos_subseq(str_to_vec(str2), str_to_vec(subseq))
subset_str1<-get_subsets(str1, pos_str1)
subset_str2<-get_subsets(str2, pos_str2)
tmp<-c()
tmp <- StrAlign(c(subset_str1[1], subset_str2[1]), sep="\\r")
for (k in 2:(length(subset_str1))){
tmp=append(tmp,StrAlign(c(subset_str1[k], subset_str2[k]), sep="\\l"))
}
output<-c()
for (k in 1:(length(tmp)/2)){
output=append(output,choose_letters(tmp[2*k-1], tmp[2*k]))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
#retourne le 1er indice d'apparition de la sous sequence (subseq) dans str1
get_pos_subseq<- function(str1, subseq){
output_pos = c()
i=1
j=1
while (i<=length(str1) && j<=length(subseq)){
if (str1[i]==subseq[j]){
output_pos[j]=i
j=j+1
}
i=i+1
}
return(output_pos)
}
#retourne la chaine str1 divisée
get_subsets <- function(str1, pos_subseq){
output<-c()
output[1]<-str_sub(str1, end=pos_subseq[1]-1)
for (i in 1:(length(pos_subseq)-1)){
print(output)
output[i+1]<-str_sub(str1, start=pos_subseq[i], end=pos_subseq[i+1]-1)
}
output[length(pos_subseq)+1]<-str_sub(str1, start=pos_subseq[length(pos_subseq)])
return(output)
}
#fonction qui divise tous les mots en 2 sans prendre la partie commune, et qui les fusionne en 1
split_string<-function(vec_str, com_subseq){
start<-c()
end<-c()
index<-str_locate(vec_str, com_subseq)
for (i in 1:length(vec_str)){
start<-append(start, str_sub(vec_str[i], end=index[i,1]-1))
end<-append(end,str_sub(vec_str[i], start=index[i,2]+1))
}
start<-StrAlign(start, sep="\\r")
end<-StrAlign(end, sep="\\l")
start<-choose_letters(start)
end<-choose_letters(end)
return(c(start, end))
}
#fonction qui forme un mot au hasard à partir des mots entrés
choose_letters<-function(vec_str){
n<-length(vec_str)
k<-str_length(vec_str[1])
res<-sample(x=1:n, size=k, replace=TRUE)
output<-""
for (i in 1:k) {
output<-append(output, str_sub(vec_str[res[i]], start=i, end=i))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
str_to_vec<-function(str1){
return(unlist(str_split(str1, "")))
}
get_nodes_mat(df)
df
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
#retourne la liste des représentant de chaque cluster. En ieme position, le representant du cluster i.
#entrée: un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
get_nodes_mat<-function(df){
output<-c()
index <- 1
cluster_i <- get_cluster_i(df, index)        #retourne les elements du ieme cluster
while (length(cluster_i)>0){
if (length(cluster_i)==1){                 #si un seul element dans le cluster, c'est le representant
output<-append(output, cluster_i[1])
}
else{
mat_dist_cluster<-stringdistmatrix(cluster_subset, cluster_subset, method = "lcs")  #on calcule les distances des elements du cluster UNIQUEMENT
output<-append(output, find_representant(mat_dist_cluster, cluster_subset))         #on trouve son représentant
}
index<-index+1                                                     #incrementation de i et recalcul du nouveau cluster
cluster_subset <- get_cluster_i(df, index)
}
return(output)
}
#retourne les elements du ieme cluster.
#entrée: -un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
#        -l'indice du cluster
get_cluster_i<-function(df,i){
return(subset(df, subset= (cluster==i))$strings )
}
#fonction qui trouve le représentant d'un cluster à partir de la matrice de distance et du vecteur des différents elements
#on trouve l'element qui a la plus petite distance au carré cumulée.
find_representant <- function(matrix_dist, vec_str){
line_dist = rowSums(matrix_dist**2)
ranked_dist<-min_rank(line_dist)
return(vec_str[which(ranked_dist==1)])
}
#fonction qui fusionne N strings à partir de leur séquence commune
merge_strings <- function(vec_str, com_subseq){
splited <- split_string(vec_str, com_subseq)
output<-str_c(splited[1],com_subseq, splited[2])
return(output)
}
#fonction qui retourne la distance entre deux strings et la substring commune la plus longue
distance <- function(string1, string2) {
seqcom <- LCSn(c(string1, string2))
return(c(str_length(seqcom[1]), seqcom))
}
merge_from_subseq <- function(str1, str2, subseq){
pos_str1 = get_pos_subseq(str_to_vec(str1), str_to_vec(subseq))
pos_str2 = get_pos_subseq(str_to_vec(str2), str_to_vec(subseq))
subset_str1<-get_subsets(str1, pos_str1)
subset_str2<-get_subsets(str2, pos_str2)
tmp<-c()
tmp <- StrAlign(c(subset_str1[1], subset_str2[1]), sep="\\r")
for (k in 2:(length(subset_str1))){
tmp=append(tmp,StrAlign(c(subset_str1[k], subset_str2[k]), sep="\\l"))
}
output<-c()
for (k in 1:(length(tmp)/2)){
output=append(output,choose_letters(tmp[2*k-1], tmp[2*k]))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
#retourne le 1er indice d'apparition de la sous sequence (subseq) dans str1
get_pos_subseq<- function(str1, subseq){
output_pos = c()
i=1
j=1
while (i<=length(str1) && j<=length(subseq)){
if (str1[i]==subseq[j]){
output_pos[j]=i
j=j+1
}
i=i+1
}
return(output_pos)
}
#retourne la chaine str1 divisée
get_subsets <- function(str1, pos_subseq){
output<-c()
output[1]<-str_sub(str1, end=pos_subseq[1]-1)
for (i in 1:(length(pos_subseq)-1)){
print(output)
output[i+1]<-str_sub(str1, start=pos_subseq[i], end=pos_subseq[i+1]-1)
}
output[length(pos_subseq)+1]<-str_sub(str1, start=pos_subseq[length(pos_subseq)])
return(output)
}
#fonction qui divise tous les mots en 2 sans prendre la partie commune, et qui les fusionne en 1
split_string<-function(vec_str, com_subseq){
start<-c()
end<-c()
index<-str_locate(vec_str, com_subseq)
for (i in 1:length(vec_str)){
start<-append(start, str_sub(vec_str[i], end=index[i,1]-1))
end<-append(end,str_sub(vec_str[i], start=index[i,2]+1))
}
start<-StrAlign(start, sep="\\r")
end<-StrAlign(end, sep="\\l")
start<-choose_letters(start)
end<-choose_letters(end)
return(c(start, end))
}
#fonction qui forme un mot au hasard à partir des mots entrés
choose_letters<-function(vec_str){
n<-length(vec_str)
k<-str_length(vec_str[1])
res<-sample(x=1:n, size=k, replace=TRUE)
output<-""
for (i in 1:k) {
output<-append(output, str_sub(vec_str[res[i]], start=i, end=i))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
str_to_vec<-function(str1){
return(unlist(str_split(str1, "")))
}
list_of_strings_full <- na.omit(list_of_strings)
matrix<-stringdistmatrix(list_of_strings_full, list_of_strings_full, method = "lcs")
#Partie représentation graphique par un force-directed graph
GRAPHE=FALSE
if (GRAPHE){matrix_qg <-1/matrix
qgraph(matrix_qg, layout='spring', vsize=3)
}
tree<-hclust(as.dist(matrix), method="ward.D")
dend<-as.dendrogram(tree)
par(mar=c(6.1, 4.1, 4.1, 2.1))
plot(tree)
N_CLUSTER = 2
cluster<-cutree(tree, N_CLUSTER)
df<-tibble(list_of_strings_full, cluster)
colnames(df)<-c("strings", "cluster_n")
nodes_data<-get_nodes_mat(df)
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
#retourne la liste des représentant de chaque cluster. En ieme position, le representant du cluster i.
#entrée: un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
get_nodes_mat<-function(df){
output<-c()
index <- 1
cluster_i <- get_cluster_i(df, index)        #retourne les elements du ieme cluster
while (length(cluster_i)>0){
if (length(cluster_i)==1){                 #si un seul element dans le cluster, c'est le representant
output<-append(output, cluster_i[1])
}
else{
mat_dist_cluster<-stringdistmatrix(cluster_i, cluster_i, method = "lcs")  #on calcule les distances des elements du cluster UNIQUEMENT
output<-append(output, find_representant(mat_dist_cluster, cluster_i))         #on trouve son représentant
}
index<-index+1                                                     #incrementation de i et recalcul du nouveau cluster
cluster_i <- get_cluster_i(df, index)
}
return(output)
}
#retourne les elements du ieme cluster.
#entrée: -un dataframe 2 colonnes (les elements | le cluster qui leur est assigné)
#        -l'indice du cluster
get_cluster_i<-function(df,i){
return(subset(df, subset= (cluster==i))$strings )
}
#fonction qui trouve le représentant d'un cluster à partir de la matrice de distance et du vecteur des différents elements
#on trouve l'element qui a la plus petite distance au carré cumulée.
find_representant <- function(matrix_dist, vec_str){
line_dist = rowSums(matrix_dist**2)
ranked_dist<-min_rank(line_dist)
return(vec_str[which(ranked_dist==1)])
}
#fonction qui fusionne N strings à partir de leur séquence commune
merge_strings <- function(vec_str, com_subseq){
splited <- split_string(vec_str, com_subseq)
output<-str_c(splited[1],com_subseq, splited[2])
return(output)
}
#fonction qui retourne la distance entre deux strings et la substring commune la plus longue
distance <- function(string1, string2) {
seqcom <- LCSn(c(string1, string2))
return(c(str_length(seqcom[1]), seqcom))
}
merge_from_subseq <- function(str1, str2, subseq){
pos_str1 = get_pos_subseq(str_to_vec(str1), str_to_vec(subseq))
pos_str2 = get_pos_subseq(str_to_vec(str2), str_to_vec(subseq))
subset_str1<-get_subsets(str1, pos_str1)
subset_str2<-get_subsets(str2, pos_str2)
tmp<-c()
tmp <- StrAlign(c(subset_str1[1], subset_str2[1]), sep="\\r")
for (k in 2:(length(subset_str1))){
tmp=append(tmp,StrAlign(c(subset_str1[k], subset_str2[k]), sep="\\l"))
}
output<-c()
for (k in 1:(length(tmp)/2)){
output=append(output,choose_letters(tmp[2*k-1], tmp[2*k]))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
#retourne le 1er indice d'apparition de la sous sequence (subseq) dans str1
get_pos_subseq<- function(str1, subseq){
output_pos = c()
i=1
j=1
while (i<=length(str1) && j<=length(subseq)){
if (str1[i]==subseq[j]){
output_pos[j]=i
j=j+1
}
i=i+1
}
return(output_pos)
}
#retourne la chaine str1 divisée
get_subsets <- function(str1, pos_subseq){
output<-c()
output[1]<-str_sub(str1, end=pos_subseq[1]-1)
for (i in 1:(length(pos_subseq)-1)){
print(output)
output[i+1]<-str_sub(str1, start=pos_subseq[i], end=pos_subseq[i+1]-1)
}
output[length(pos_subseq)+1]<-str_sub(str1, start=pos_subseq[length(pos_subseq)])
return(output)
}
#fonction qui divise tous les mots en 2 sans prendre la partie commune, et qui les fusionne en 1
split_string<-function(vec_str, com_subseq){
start<-c()
end<-c()
index<-str_locate(vec_str, com_subseq)
for (i in 1:length(vec_str)){
start<-append(start, str_sub(vec_str[i], end=index[i,1]-1))
end<-append(end,str_sub(vec_str[i], start=index[i,2]+1))
}
start<-StrAlign(start, sep="\\r")
end<-StrAlign(end, sep="\\l")
start<-choose_letters(start)
end<-choose_letters(end)
return(c(start, end))
}
#fonction qui forme un mot au hasard à partir des mots entrés
choose_letters<-function(vec_str){
n<-length(vec_str)
k<-str_length(vec_str[1])
res<-sample(x=1:n, size=k, replace=TRUE)
output<-""
for (i in 1:k) {
output<-append(output, str_sub(vec_str[res[i]], start=i, end=i))
}
output<-str_replace_all(output, " ", "")
output <- paste(output, collapse="")
return(output)
}
str_to_vec<-function(str1){
return(unlist(str_split(str1, "")))
}
cluster<-cutree(tree, N_CLUSTER)
df<-tibble(list_of_strings_full, cluster)
colnames(df)<-c("strings", "cluster_n")
nodes_data<-get_nodes_mat(df)
nodes_data
df
df_representants <- str_to_seq(nodes[1])
#donne l'id de la sequence associée
find_seqId<- function(str) {
ids<-get_all_id_seq(ds_studied)
for (i in ids) {
if (str == list_of_strings[i]) {
return(i)
}
}
return (-1)
}
df_representants <- str_to_seq(nodes[1])
#donne l'id de la sequence associée
find_seqId<- function(str) {
ids<-get_all_id_seq(ds_studied)
for (i in ids) {
print(i)
if (str == list_of_strings[i]) {
return(i)
}
}
return (-1)
}
#print(list_of_strings)
#all_seq<-get_all_id_seq(ds_studied)
print(str_to_seq("NDEFGGGGGGMO"))
nodes[1]
nodes
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
library("qgraph")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
source("seqToString.R")
source("utilsClustering.R")
#on supprime les valeurs nulles dans list_of_string
list_of_strings_full <- na.omit(list_of_strings)
matrix<-stringdistmatrix(list_of_strings_full, list_of_strings_full, method = "lcs")
#Partie représentation graphique par un force-directed graph
GRAPHE=FALSE
if (GRAPHE){matrix_qg <-1/matrix
qgraph(matrix_qg, layout='spring', vsize=3)
}
tree<-hclust(as.dist(matrix), method="ward.D")
dend<-as.dendrogram(tree)
par(mar=c(6.1, 4.1, 4.1, 2.1))
plot(tree)
N_CLUSTER = 2
cluster<-cutree(tree, N_CLUSTER)
df_clustered<-tibble(list_of_strings_full, cluster)
colnames(df_clustered)<-c("strings", "cluster_n")
nodes<-get_nodes_mat(df_clustered)
nodes
nodes[i]
nodes[1]
df_representants <- str_to_seq(nodes[1])
for (i in 2:N_CLUSTER){
df_representants<-rbind(df_representants, str_to_seq(nodes[i]))
}
df_representants
colnames(df_representants)
colnames(df_representants)[2:3]
colnames(df_representants)[8:9]
colnames(df_representants)[9:10]
colnames(df_representants)[9:10]<-c("start", "complete")
df_representants
ds_clust_format <- tibble(start, complete, ds_clustered)
df_representants %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence_id", activity_id = "actionName", timestamps = c("start", "complete"))%>%
process_map(frequency("relative"))
df_representants %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence_id", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence_id")%>%
process_map(frequency("relative"))
