library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
library("qgraph")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
source("seqToString.R")
source("utilsClustering.R")
matrix<-stringdistmatrix(list_of_strings, list_of_strings, method = "lcs")
#Partie représentation graphique par un force-directed graph
matrix_qg <-1/matrix
qgraph(matrix_qg, layout='spring', vsize=3)
tree<-hclust(as.dist(matrix), method="ward.D")
dend<-as.dendrogram(tree)
par(mar=c(6.1, 4.1, 4.1, 2.1))
plot(tree)
N_CLUSTER = 4
cluster<-cutree(tree, N_CLUSTER)
df<-tibble(list_of_strings, cluster)
nodes_data<-get_nodes_mat(df)
nodes<-nodes_data
ds_clustered<-tibble(str_to_subset(nodes[1]), rep(1,length(nodes[1])))
colnames(ds_clustered)<-c("actionName", "sequence")
for (i in 2:N_CLUSTER){
X<-tibble(str_to_subset(nodes[i]), rep(i,length(nodes[i])))
colnames(X)<-c("actionName", "sequence")
ds_clustered<-rbind(ds_clustered, X)
}
#Partie représentation graphique par un force-directed graph
matrix_qg <-1/matrix
qgraph(matrix_qg, layout='spring', vsize=3)
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
get_distance_in_clust<-function(df, index, center){
output<-c()
cluster_subset <- get_cluster_i(df, index)
matrix_dist<-stringdistmatrix(cluster_subset, cluster_subset, method = "lcs")
clust_dist = rowSums(matrix_dist**2)
index_center <- which(cluster_subset == center)
return(clust_dist[index_center][1])
}
ncluster<-c()
distcluster<-c()
for (k in 1:10){
cluster<-cutree(tree, k)
df<-tibble(list_of_strings, cluster)
nodes_data<-get_nodes_mat(df)
nodes<-nodes_data
sum_all_clust<-0
for (i in 1:k){
sum_all_clust <- sum_all_clust + get_distance_in_clust(df, i, nodes[i])
}
ncluster[k]<-k
distcluster[k]<-sum_all_clust
}
df_plot <- tibble(ncluster, distcluster)
ggplot(data = df_plot, aes(x=ncluster, y=distcluster)) + geom_line() + geom_point()
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
library("qgraph")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
source("seqToString.R")
source("utilsClustering.R")
matrix<-stringdistmatrix(list_of_strings, list_of_strings, method = "lcs")
#Partie représentation graphique par un force-directed graph
matrix_qg <-1/matrix
qgraph(matrix_qg, layout='spring', vsize=3)
tree<-hclust(as.dist(matrix), method="ward.D")
dend<-as.dendrogram(tree)
par(mar=c(6.1, 4.1, 4.1, 2.1))
plot(tree)
N_CLUSTER = 10
cluster<-cutree(tree, N_CLUSTER)
df<-tibble(list_of_strings, cluster)
nodes_data<-get_nodes_mat(df)
nodes<-nodes_data
ds_clustered<-tibble(str_to_subset(nodes[1]), rep(1,length(nodes[1])))
colnames(ds_clustered)<-c("actionName", "sequence")
for (i in 2:N_CLUSTER){
X<-tibble(str_to_subset(nodes[i]), rep(i,length(nodes[i])))
colnames(X)<-c("actionName", "sequence")
ds_clustered<-rbind(ds_clustered, X)
}
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
library("stringr")
library("stringdist")
library("DescTools")
library("PTXQC")
source("clustering.R")
#on va adapter les datas des clusters
#création de faux timestamp
start <- as.POSIXct(c(1:length(ds_clustered$actionName)), origin = "1970-01-01", tz = "UTC")
complete<-start
ds_clust_format <- tibble(start, complete, ds_clustered)
ds_clust_format %>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms) %>%
activitylog(case_id = "sequence", activity_id = "actionName", timestamps = c("start", "complete"), resource_id = "sequence")%>%
process_map(frequency("relative"))
View(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-ds_2300_restricted
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
ds <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
DATE_MATCH = "29-04-2023"
#on filtre les donées pour garder uniquement les colonnes "utiles"
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out", "Sequence", "", "Playmaker Options", "Period", " ", "Collection")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
secondes_avec_ms <-  as.numeric(ds_final$ps_timestamp)
date_posix <- as.POSIXct(secondes_avec_ms, origin = "1970-01-01", tz = "UTC")
ds_final$date_posix_start <- date_posix
secondes_avec_ms <-  as.numeric(ds_final$ps_endstamp)
date_posix <- as.POSIXct(secondes_avec_ms, origin = "1970-01-01", tz = "UTC")
ds_final$date_posix_end <- date_posix
#ajout colonne position sur le terrain
{
ds_final$zoneAction <- rep(1, nrow(ds_final))
set_zone <- function(equipe){
if (equipe == 2300){
return(0)
}
if (equipe == 2350){
return(2)
}
}
l<-1
while (l<nrow(ds_final)){
if (ds_final[l,"actionName"]=="Opposition 22 Entry"){
debut <- ds_final[l, "date_posix_start"]
fin <- ds_final[l, "date_posix_end"]
equipe <- ds_final[l, "team_id"]
while (ds_final[l, "date_posix_end"]<=fin){
ds_final[l, "zoneAction"]<- set_zone(equipe)
l <- l+1
}
} else{
l <- l+1
}
}
}
#séquençage
{
n_sequence = 1
l<-1
while (l %in% 1:nrow(ds_final)){
ds_final[l,"sequence_id"] = n_sequence
if (ds_final[l,"actionName"] == "Possession"){
temps_fin <- ds_final[l,"ps_endstamp"]
l<-l+1
while (ds_final[l, "ps_endstamp"]<=temps_fin){
ds_final[l,"sequence_id"] = n_sequence
l<-l+1
}
if (ds_final[l, "actionName"]=="Goal Kick"){
ds_final[l,"sequence_id"] = n_sequence
}else{
ds_final[l,"sequence_id"] = n_sequence+1
}
n_sequence <- n_sequence +1
}
l<-l+1
}
}
#on catégorise chaque action selon 3 catégories: O (Offensif), D (Defensif), N (Neutre)
#on rentre les premières actions à la main
{categories = c("O", "D", "O", "N", "D", "O", "N", "N", "O", "O", "O", "D", "N")
categories[14]<- "N"
categories[21]<-"N"
categories[23]<-"D"
categories[24]<-"D"
categories[27]<-"O"
categories[40]<-"D"
categories[43]<-"N"
categories[44]<-"O"
categories[45]<-"D"
categories[46]<-"O"
l<-1
for (l in 1:nrow(ds_final)){
ds_final[l, "actionName"] <-  paste0(categories[ds_final[l, "action"]],"-",ds_final[l, "actionName"])
}
}
#on sépare les séquences des deux équipes
liste_sequences_2300 <- c()
liste_sequences_2350 <- c()
i <- 1
j <- 1
for (l in 1:nrow(ds_final)){
if (ds_final[l, "action"] == 15 & ds_final[l, "team_id"] == 2300){
liste_sequences_2300[i] <- ds_final[l, "sequence_id"]
i <- i + 1
} else {
liste_sequences_2350[j] <- ds_final[l, "sequence_id"]
j <- j + 1
}
}
#informations que l'on va utiliser pour la suite
data_2300 = distinct(subset(ds_final, subset = (sequence_id %in% liste_sequences_2300)))
data_2350 = distinct(subset(ds_final, subset = (sequence_id %in% liste_sequences_2350)))
#on supprime les actions "Possession" qui ne servent plus
data_2300 = subset (data_2300, subset = (action != 15))
data_2350 = subset (data_2350, subset = (action != 15))
#Isolation des séquences souhaitées
data_2300_restricted <- subset(data_2300, subset=(sequence_id %in% 12:26))
data_2350_restricted <- subset(data_2350, subset=(sequence_id %in% 12:26))
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
seqences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = subset, mapping = aes(x=x_coord, y=y_coord), color=sequence_id)
}
showDeplacementSequence(dataset)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"],ds["x_coord"], ds["y_coord"], ds["sequence_id"])
library("tidyverse")
library("ggplot2")
library("dplyr")
library("bupaverse")
library("lubridate")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
ds <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
DATE_MATCH = "29-04-2023"
#on filtre les donées pour garder uniquement les colonnes "utiles"
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"],ds["x_coord"], ds["y_coord"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out", "Sequence", "", "Playmaker Options", "Period", " ", "Collection")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
secondes_avec_ms <-  as.numeric(ds_final$ps_timestamp)
date_posix <- as.POSIXct(secondes_avec_ms, origin = "1970-01-01", tz = "UTC")
ds_final$date_posix_start <- date_posix
secondes_avec_ms <-  as.numeric(ds_final$ps_endstamp)
date_posix <- as.POSIXct(secondes_avec_ms, origin = "1970-01-01", tz = "UTC")
ds_final$date_posix_end <- date_posix
#ajout colonne position sur le terrain
{
ds_final$zoneAction <- rep(1, nrow(ds_final))
set_zone <- function(equipe){
if (equipe == 2300){
return(0)
}
if (equipe == 2350){
return(2)
}
}
l<-1
while (l<nrow(ds_final)){
if (ds_final[l,"actionName"]=="Opposition 22 Entry"){
debut <- ds_final[l, "date_posix_start"]
fin <- ds_final[l, "date_posix_end"]
equipe <- ds_final[l, "team_id"]
while (ds_final[l, "date_posix_end"]<=fin){
ds_final[l, "zoneAction"]<- set_zone(equipe)
l <- l+1
}
} else{
l <- l+1
}
}
}
#séquençage
{
n_sequence = 1
l<-1
while (l %in% 1:nrow(ds_final)){
ds_final[l,"sequence_id"] = n_sequence
if (ds_final[l,"actionName"] == "Possession"){
temps_fin <- ds_final[l,"ps_endstamp"]
l<-l+1
while (ds_final[l, "ps_endstamp"]<=temps_fin){
ds_final[l,"sequence_id"] = n_sequence
l<-l+1
}
if (ds_final[l, "actionName"]=="Goal Kick"){
ds_final[l,"sequence_id"] = n_sequence
}else{
ds_final[l,"sequence_id"] = n_sequence+1
}
n_sequence <- n_sequence +1
}
l<-l+1
}
}
#on catégorise chaque action selon 3 catégories: O (Offensif), D (Defensif), N (Neutre)
#on rentre les premières actions à la main
{categories = c("O", "D", "O", "N", "D", "O", "N", "N", "O", "O", "O", "D", "N")
categories[14]<- "N"
categories[21]<-"N"
categories[23]<-"D"
categories[24]<-"D"
categories[27]<-"O"
categories[40]<-"D"
categories[43]<-"N"
categories[44]<-"O"
categories[45]<-"D"
categories[46]<-"O"
l<-1
for (l in 1:nrow(ds_final)){
ds_final[l, "actionName"] <-  paste0(categories[ds_final[l, "action"]],"-",ds_final[l, "actionName"])
}
}
#on sépare les séquences des deux équipes
liste_sequences_2300 <- c()
liste_sequences_2350 <- c()
i <- 1
j <- 1
for (l in 1:nrow(ds_final)){
if (ds_final[l, "action"] == 15 & ds_final[l, "team_id"] == 2300){
liste_sequences_2300[i] <- ds_final[l, "sequence_id"]
i <- i + 1
} else {
liste_sequences_2350[j] <- ds_final[l, "sequence_id"]
j <- j + 1
}
}
#informations que l'on va utiliser pour la suite
data_2300 = distinct(subset(ds_final, subset = (sequence_id %in% liste_sequences_2300)))
data_2350 = distinct(subset(ds_final, subset = (sequence_id %in% liste_sequences_2350)))
#on supprime les actions "Possession" qui ne servent plus
data_2300 = subset (data_2300, subset = (action != 15))
data_2350 = subset (data_2350, subset = (action != 15))
#Isolation des séquences souhaitées
data_2300_restricted <- subset(data_2300, subset=(sequence_id %in% 12:26))
data_2350_restricted <- subset(data_2350, subset=(sequence_id %in% 12:26))
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
seqences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = subset, mapping = aes(x=x_coord, y=y_coord), color=sequence_id)
}
showDeplacementSequence(dataset)
View(data_2300_restricted)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
seqences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = subset, mapping = aes(x=x_coord, y=y_coord), color="sequence_id")
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
seqences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = seqences_r, mapping = aes(x=x_coord, y=y_coord), color="sequence_id")
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
seqences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = seqences_r, mapping = aes(x=x_coord, y=y_coord), color=sequence_id)
}
showDeplacementSequence(dataset)
data_2300_restricted$sequence_id
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id)
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), group=sequences_r$sequence_id)
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), group=sequences_r$sequence_id, color=sequences_r$sequence_id)
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id, size=3)
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id, size=2)
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot()+
geom_line(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id, size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id)+
geom_line(size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord), color=sequences_r$sequence_id)+
geom_line(size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord))+
geom_line(color=sequence_id, size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord))+
geom_line(color="sequence_id", size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord))+
geom_line(color=sequences_r$sequence_id, size=2)+
geom_point()
}
showDeplacementSequence(dataset)
library("tidyverse")
library("ggplot2")
library("dplyr")
dataset<-data_2300_restricted
showDeplacementSequence <- function (sequences){
sequences_r= data.frame(sequences["x_coord"], sequences["y_coord"], sequences["sequence_id"])
ggplot(data = sequences_r, mapping = aes(x=x_coord, y=y_coord))+
geom_line(color=sequences_r$sequence_id, size=2)+
geom_point(shape=sequences_r$sequence_id)
}
showDeplacementSequence(dataset)
warnings()
