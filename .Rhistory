setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
dataset <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
#Quelques infos pour s'échauffer
#évolution du score
datasetScore= data.frame(dataset["MatchTime"], dataset["hometeamCurrentScore"], dataset["awayteamCurrentScore"])
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line() +
geom_smooth(se=T)
#Proportion de chaque action
datasetAction <- data.frame(dataset["action"], dataset["actionName"], dataset["MatchTime"])
datasetActionProp <- datasetAction %>% group_by(actionName) %>% tally(sort=TRUE)
ggplot(datasetActionProp,aes("", n, fill=actionName))
geom_bar(width=1, stat = "identity", color="white") +
coord_polar("y", start=0) +
geom_text(aes(y=lab.ypos, label=n), color="white") +
theme_void()
datasetActionProp <- datasetActionProp["n"] / colSums(datasetActionProp["n"])
datasetActionProp
colSums(datasetActionProp["n"])
ggplot(datasetActionProp,aes("", n, fill=actionName))
datasetActionProp <- datasetActionProp["n"] / colSums(datasetActionProp["n"])
datasetActionProp <- datasetActionProp / colSums(datasetActionProp["n"])
ggplot(datasetActionProp,aes("", n, fill=actionName))
datasetActionProp <- datasetAction %>% group_by(actionName) %>% tally(sort=TRUE)
dsAction <- data.frame(dataset["action"], dataset["actionName"], dataset["MatchTime"])
dsActionCount <- dsAction %>% group_by(actionName) %>% tally(sort=TRUE)
dsActionProp <- data.frame(dsActionCount, dsActionCount["n"] / colSums(dsActionCount["n"]))
dsActionProp
name(dsActionProp) <- c("actionName", "occ", "prop")
names(dsActionProp) <- c("actionName", "occ", "prop")
o
dsActionProp
ggplot(datasetActionProp,aes("", prop, fill=actionName))
ggplot(dsActionProp,aes("", prop, fill=actionName))
geom_bar(width=1, stat = "identity", color="white") +
coord_polar("y", start=0) +
geom_text(aes(y=lab.ypos, label=occ), color="white") +
theme_void()
ggplot(dsActionProp,aes("", prop, fill=actionName))
geom_bar(width=1, stat = "identity", color="white") +
coord_polar("y", start=0) +
theme_void()
ggplot(data = dsActionProp)
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName))
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=2, fill=actionName))
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName)) +
coord_polar()
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName)) +
coord_polar(theta="y")
View(dataset)
#Localisation des passes en fonction de l"équipe
dsPass <- subset(dataset, subset = actionName == "Pass")
dsPass
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color=teeam_id)
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line() +
geom_smooth(se=T)
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color=team_id)
#Localisation des passes en fonction de l"équipe
dsPass <- subset(dataset, subset = actionName == "Pass")
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color=team_id)
View(dsPass)
#Localisation des passes en fonction de l"équipe
dsPass <- subset(dataset, subset = actionName == "Pass")
View(dsPass)
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color=team_id)
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color=dsPass["team_id"])
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord)) +
geom_point(color="red")
geom_point()
#Localisation des passes en fonction de l"équipe
dsPass <- subset(dataset, subset = actionName == "Pass")
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=team_id)) +
geom_point()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=is_home)) +
geom_point()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=isHome)) +
geom_point()
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName)) +
coord_polar(theta="y")
void_theme()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=isHome)) +
geom_point() +
theme_classic()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=actionTypeName)) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=ActionTypeName)) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
library("tidyverse")
library("ggplot2")
library("dplyr")
library("ggplot2")
library("dplyr")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
dataset <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
#évolution du score
datasetScore= data.frame(dataset["MatchTime"], dataset["hometeamCurrentScore"], dataset["awayteamCurrentScore"])
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line() +
geom_smooth(se=T)
datasetScore= data.frame(dataset["MatchTime"], dataset["hometeamCurrentScore"], dataset["awayteamCurrentScore"])
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore))
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_point()
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line()
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line()+
geom_point()
ggplot(data = datasetScore, mapping = aes(x=MatchTime, y=hometeamCurrentScore)) +
geom_line() +
geom_smooth(se=T)
dsAction <- data.frame(dataset["action"], dataset["actionName"], dataset["MatchTime"])
dsActionCount <- dsAction %>% group_by(actionName) %>% tally(sort=TRUE)
dsActionProp <- data.frame(dsActionCount, dsActionCount["n"] / colSums(dsActionCount["n"]))
names(dsActionProp) <- c("actionName", "occ", "prop")
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName)) +
coord_polar(theta="y")
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName))
ggplot(data = dsActionProp) +
geom_bar(mapping = aes(x=1, fill=actionName)) +
coord_polar(theta="y")
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=ActionTypeName)) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color="red")) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=ActionTypeName)) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=ActionTypeName)) +
geom_point() +
facet_wrap(~isHome)
ggplot(data = dsPass, aes(x=x_coord,y=y_coord, color=ActionTypeName)) +
geom_point() +
facet_wrap(~isHome) +
theme_classic()
library(bupaverse)
library("tidyverse")
library("ggplot2")
library("dplyr")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
ds <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
dico_actionNames <- ds %>% group_by(action)
dico_actionNames
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% group_by(action)
dico_actionNames
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct()
dico_actionNames
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct() %>% arrange()
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct() %>% arrange()
dico_actionNames
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct() %>% sort()
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct() %>% desc()
dico_actionNames <- data.frame(ds["action"], ds["actionName"]) %>% distinct()
dico_actionNames
unlist(dico_actionNames)
View(unlist(dico_actionNames))
as.vector(dico_actionNames)
sort(as.vector(dico_actionNames))
as.vector(dico_actionNames)$action
temp <- data.frame(ds["action"], ds["actionName"]) %>% distinct()
temp
dico_actionNames <- as.vector(temp)$action
names(dico_actionNames) <- as.vector(temp)$actionName
dico_actionNames
sort(dico_actionNames)
temp <- data.frame(ds["action"], ds["actionName"]) %>% distinct()
temp
dico_actionNames <- as.vector(temp)$action
names(dico_actionNames) <- as.vector(temp)$actionName
dico_actionNames <- sort(dico_actionNames)$actionName
dico_actionNames <- names(sort(dico_actionNames))
dico_actionNames
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"])
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["sequence_id"])
library("tidyverse")
library("ggplot2")
library("dplyr")
setwd("c:\\Users\\malat\\OneDrive\\Bureau\\S6\\Stage\\StageL3MIDL")
ds <- read.csv(".\\data_rugby.csv", sep=";", dec=".")
#dictionnaire qui nous permet de trouver le nom de l'action à partir de son identifiant
temp <- data.frame(ds["action"], ds["actionName"]) %>% distinct()
dico_actionNames <- as.vector(temp)$action
names(dico_actionNames) <- as.vector(temp)$actionName
dico_actionNames <- names(sort(dico_actionNames))
#on filtre les donées pour garder uniquement les colonnes "utiles"
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#séquençage
n_sequence = 1
for (l in 1:nrow(ds_final)){
print(l)
if (ds_final[l,"actionName"] == "Sequence"){
n_sequence = n_sequence +1}
ds_final[l,"sequence_id"] = n_sequence
}
for (l in 1:nrow(ds_final)){
if (ds_final[l,"actionName"] == "Sequence"){
n_sequence = n_sequence +1}
ds_final[l,"sequence_id"] = n_sequence
}
ds_final %>%
dplyr::rename(start = ps_timestamp, end = ps_endstamp)%>%
ds_final
ds_final %>%
dplyr::rename(start = ps_timestamp, end = ps_endstamp)%>%
convert_timestamp(columns = c("start", "end"), format(ymd_hms))
dataset[3, "ps_timestamp"]
type(dataset[3, "ps_timestamp"])
Type(dataset[3, "ps_timestamp"])
str(dataset)
ds_final %>%
dplyr::rename(start = ps_timestamp, end = ps_endstamp)%>%
convert_timestamps(columns = c("start", "complete"), format = ymd_hms)
#conversion des timestamp en type Date
ds_final %>%
dplyr::rename(start = ps_timestamp, end = ps_endstamp)%>%
format(as.POSIXct(ds_final["ps_timestamp"], origin = "1970-01-01", tz = "UTC"), "%OS4")
class(dataset[,3])
class(dataset[3,])
class(dataset[3])
class(dataset[[3]])
class(dataset[["ps_timestamp"]])
class(as.vector(dataset[["ps_timestamp"]]))
ds_final %>%
dplyr::rename(start = ps_timestamp, end = ps_endstamp)
as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC")
ds_final
as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC")
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%OS")
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%S.%OS")
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%OS4")
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%OS2")
ds_final <- dplyr::rename(start = ps_timestamp, end = ps_endstamp) %>%
mutate(Hours = hour(seconds_to_period(start)))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
ds_final <- dplyr::rename(start = ps_timestamp, end = ps_endstamp) %>%
mutate(Hours = hour(seconds_to_period(start)))
ds_final %>%
ds_final <- dplyr::rename(start = ps_timestamp, end = ps_endstamp) %>%
mutate(Hours = hour(seconds_to_period(start)))
ds_final %>%
mutate(Hours = hour(seconds_to_period(start)))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(start))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.integer(start)))
library("lubridate")
seconds_to_period(123342)
seconds_to_period(123342.343)
seconds_to_period(c(133, 6576))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final["ps_timestamp"])))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%OS2")
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%MM %OS2")
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%M %OS2")
ds_final %>%
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%M %OS2")
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2")
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final <- format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2")
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]]))) %>%
mutate(ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2"))
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
mutate(ds_final, ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2"))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
mutate(ds_final, ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2"))
ds_final
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
ds_final <- mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp)
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp)
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp)
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ds_final[["ps_timestamp"]])))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(start = seconds_to_period(as.vector(ps_timestamp)))
#on filtre les donées pour garder uniquement les colonnes "utiles"
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(start = seconds_to_period(as.vector(ps_timestamp)))
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
ds_final <- mutate(start = seconds_to_period(as.vector(ps_timestamp)))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(start = seconds_to_period(as.vector(ps_timestamp))) %>%
ds_final <-
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(start = seconds_to_period(as.vector(ps_timestamp))) %>%
ds_final <- data.frame()
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp))) %>%
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = 4)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = 4)
View(ds_final)
ds_final %>%
select(ps_timestamp) %>%
mutate(ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final %>%
select(ps_timestamp)
ds_final <- mutate(ds_final, ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
View(ds_final)
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final <- mutate(ds_final, ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final <- mutate(ds_final, ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS2"))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final <- mutate(ds_final, ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final <- mutate(ds_final, ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS"))
ds_final = data.frame(ds["team_id"], ds["ps_timestamp"],ds["ps_endstamp"], ds["action"], ds["actionName"], ds["sequence_id"])
unused_actions = list("Ref Review", "Sub In", "Sub Out")
ds_final <- subset(ds_final, subset = actionName != "Ref Review")
ds_final <- subset(ds_final, subset = !(actionName %in% unused_actions ))
#conversion des timestamp en type POSIXct
ds_final <- mutate(ds_final, ps_timestamp = seconds_to_period(as.vector(ps_timestamp)))
ds_final <- mutate(ds_final, ps_timestamp = format(as.POSIXct(as.vector(ds_final[["ps_timestamp"]]), tz="UTC"), "%H-%M-%OS"))
View(ds_final)
